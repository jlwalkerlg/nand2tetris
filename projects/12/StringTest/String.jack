// This file is part of the materials accompanying the book
// "The Elements of Computing Systems" by Nisan and Schocken,
// MIT Press. Book site: www.idc.ac.il/tecs
// File name: projects/12/String.jack

/**
 * The String type.
 */
class String
{
    field int maxLen;
    field int len;
    field Array string;

    /** Constructs a new empty String with a maximum length of
     *  maxLength. */
    constructor String new(int maxLength)
    {
        if (maxLength < 1) {
            let maxLength = 1;
        }
        let len = 0;
        let maxLen = maxLength;
        let string = Array.new(maxLength);
        return this;
    }

    /** De-allocates the string and frees its space. */
    method void dispose()
    {
        do string.dispose();
        return;
    }

    /** Returns the current length of this String. */
    method int length()
    {
        return len;
    }

    /** Returns the character at location j. */
    method char charAt(int j)
    {
        return string[j];
    }

    /** Sets the j'th character of this string to be c. */
    method void setCharAt(int j, char c)
    {
        let string[j] = c;
        return;
    }

    /** Appends the character c to the end of this String.
     *  Returns this string as the return value. */
    method String appendChar(char c)
    {
        let string[len] = c;
        let len = len + 1;
        return this;
    }

    /** Erases the last character from this String. */
    method void eraseLastChar()
    {
        if (len > 0) {
            let len = len - 1;
        }
        return;
    }

    /** Returns the integer value of this String until the first non
     *  numeric character. */
    method int intValue()
    {
        var int result, i, c;
        var boolean isNegative;

        let result = 0;

        // if first c is '-', it is negative
        if (string[0] = 45) {
            let isNegative = true;
            let i = 1;
        } else {
            let isNegative = false;
            let i = 0;
        }

        while (i < len) {
            let c = string[i];
            if (c < 48 | c > 57) { return result; }

            let result = (result * 10) + (c - 48);

            let i = i + 1;
        }

        if (isNegative) {
            return -1 * result;
        }
        return result;
    }

    /** Sets this String to hold a representation of the given
     *  number. */
    method void setInt(int val)
    {
        let len = 0;

        if(val < 0) {
            let val = val * -1;
            do appendChar(45); // 45 is the ASCII value of '-'
        }

        do setIntWorker(val);

        return;
    }

    method void setIntWorker(int n)
    {
        var int lastDigit, div, c;

        let div = n / 10;
        let lastDigit = n - (div * 10);
        let c = lastDigit + 48;

        if (n < 10) {
            do appendChar(c);
            return;
        }

        do setIntWorker(div);
        do appendChar(c);

        return;
    }

    /** Returns the new line character. */
    function char newLine()
    {
        return 128;
    }

    /** Returns the backspace character. */
    function char backSpace()
    {
        return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote()
    {
        return 34;
    }

}
