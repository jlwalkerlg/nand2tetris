// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Memory.jack

/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks. The Hack RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 */
class Memory {

    // When the jack compiler compiles memory[x],
    // it adds memory to x, pops it into pointer 1,
    // then uses that value to access the RAM location
    // at which pointer 1 points.
    // Hence if memory = 0, any location x in RAM can be
    // accessed with memory[x];
    static Array memory;

    static int HEAP_BASE;

    // pointer to next available address
    static int free;

    /** Initializes the class. */
    function void init() {
        var Array arr;

        let memory = 0;
        let HEAP_BASE = 2048;
        let free = HEAP_BASE;

        let arr = Array.new(2);
        let arr[0] = 1;
        let arr[1] = 2;

        do Sys.halt();

        return;
    }

    /** Returns the RAM value at the given address. */
    function int peek(int address) {
        return memory[address];
    }

    /** Sets the RAM value at the given address to the given value. */
    function void poke(int address, int value) {
        let memory[address] = value;
        return;
    }

    /** Finds an available RAM block of the given size and returns
     *  a reference to its base address. */
    function int alloc(int size) {
        var int pointer;

        let pointer = free;
        let free = free + size;

        return pointer;
    }

    /** De-allocates the given object (cast as an array) by making
     *  it available for future allocations. */
    function void deAlloc(Array o) {
        return;
    }
}
