// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Memory.jack

/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks. The Hack RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 */
class Memory {

    // When the jack compiler compiles memory[x],
    // it adds memory to x, pops it into pointer 1,
    // then uses that value to access the RAM location
    // at which pointer 1 points.
    // Hence if memory = 0, any location x in RAM can be
    // accessed with memory[x];
    static Array memory;

    static Array firstBlock;

    static int HEAP_BASE, HEAP_SIZE;

    /** Initializes the class. */
    function void init() {
        let memory = 0;

        let HEAP_BASE = 2048;
        let HEAP_SIZE = 14335;

        let firstBlock = HEAP_BASE;
        let firstBlock[0] = HEAP_SIZE;
        let firstBlock[1] = null;

        return;
    }

    /** Returns the RAM value at the given address. */
    function int peek(int address) {
        return memory[address];
    }

    /** Sets the RAM value at the given address to the given value. */
    function void poke(int address, int value) {
        let memory[address] = value;
        return;
    }

    /** Finds an available RAM block of the given size and returns
     *  a reference to its base address. */
    function int alloc(int size) {
        var Array block, prevBlock, nextBlock;

        let block = firstBlock;

        while (block[0] < size + 2) {
            if (block[1] = null) {
                return -1;
            }
            let prevBlock = block;
            let block = block[1];
        }

        let nextBlock = block + 2 + size;
        let nextBlock[0] = block[0] - 2 - size;

        if (block[1] = null) {
            let nextBlock[1] = null;
        } else {
            let nextBlock[1] = block[1];
        }

        if (block = firstBlock) {
            let firstBlock = block + 2 + size;
        } else {
            let prevBlock[1] = block[1];
        }

        return block + 2;
    }

    /** De-allocates the given object (cast as an array) by making
     *  it available for future allocations. */
    function void deAlloc(Array o) {
        let o[-1] = firstBlock[0];
        let firstBlock = o - 2;
        return;
    }
}
