// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Screen.jack

/**
 * A library of functions for displaying graphics on the screen.
 * The Hack physical screen consists of 512 rows (indexed 0..511, top to bottom)
 * of 256 pixels each (indexed 0..255, left to right). The top left pixel on
 * the screen is indexed (0,0).
 */
class Screen {

    static int SCREEN, TOTAL_ROWS, WORDS_PER_ROW, TOTAL_WORDS, COLOR;
    static Array twoToThe;

    /** Initializes the Screen. */
    function void init() {
        let SCREEN = 16384;
        let TOTAL_ROWS = 256;
        let WORDS_PER_ROW = 32;
        let TOTAL_WORDS = WORDS_PER_ROW * TOTAL_ROWS;
        let COLOR = -1;

        let twoToThe = Array.new(16);
        let twoToThe[0] = 1;
        let twoToThe[1] = 2;
        let twoToThe[2] = 4;
        let twoToThe[3] = 8;
        let twoToThe[4] = 16;
        let twoToThe[5] = 32;
        let twoToThe[6] = 64;
        let twoToThe[7] = 128;
        let twoToThe[8] = 256;
        let twoToThe[9] = 512;
        let twoToThe[10] = 1024;
        let twoToThe[11] = 2048;
        let twoToThe[12] = 4096;
        let twoToThe[13] = 8192;
        let twoToThe[14] = 16384;
        let twoToThe[15] = 16384 + 16384;

        do Screen.clearScreen();

        do Screen.drawPixel(0, 0);
        do Screen.drawPixel(0, 1);
        do Screen.drawPixel(16, 0);
        do Screen.drawPixel(511, 0);
        do Screen.drawPixel(511, 255);

        // horizontal lines
        do Screen.drawLine(0, 0, 10, 0);
        do Screen.drawLine(0, 100, 100, 100);
        do Screen.drawLine(0, 200, 511, 200);

        // vertical lines
        do Screen.drawLine(100, 0, 100, 100);
        do Screen.drawLine(150, 100, 150, 200);
        do Screen.drawLine(200, 0, 200, 255);

        // diagonal lines
        do Screen.drawLine(0, 0, 10, 10);

        do Screen.drawRectangle(50, 100, 100, 200);

        do Sys.halt();

        return;
    }

    /** Erases the entire screen. */
    function void clearScreen() {
        var int i;

        while (i < TOTAL_WORDS) {
            do Memory.poke(SCREEN + i, 0);
            let i = i + 1;
        }

        return;
    }

    /** Sets the current color, to be used for all subsequent drawXXX commands.
     *  Black is represented by true, white by false. */
    function void setColor(boolean b) {
        if (b) {
            let COLOR = -1;
        } else {
            let COLOR = 0;
        }

        return;
    }

    /** Draws the (x,y) pixel, using the current color. */
    function void drawPixel(int x, int y) {
        var int address, mod, pixel, current;

        let address = SCREEN + (32 * y) + (x / 16);
        let mod = x - (x / 16 * 16);

        let pixel = twoToThe[mod] & COLOR;

        let current = Memory.peek(address);

        do Memory.poke(address, pixel | current);

        return;
    }

    function int getAddress(int x, int y) {
        return SCREEN + (32 * y) + (x / 16);
    }

    function int getPixel(int x) {
        var int mod;
        let mod = x - (x / 16 * 16);
        return twoToThe[mod] & COLOR;
    }

    /** Draws a line from pixel (x1,y1) to pixel (x2,y2), using the current color. */
    function void drawLine(int x1, int y1, int x2, int y2) {
        var int dx, dy, a, b, adyMinusbdx;
        var int x1Address, x2Address, y1Address, y2Address, mod, pixel;

        if (x1 = x2) {
            let y1Address = Screen.getAddress(x1, y1);
            let y2Address = Screen.getAddress(x1, y2);

            let pixel = Screen.getPixel(x1);

            do Memory.poke(y1Address, pixel);

            let y1Address = y1Address + 32;

            while (y1Address < y2Address) {
                do Memory.poke(y1Address, pixel);

                let y1Address = y1Address + 32;
            }

            return;
        }

        if (y1 = y2) {
            // draw from x1 to end
            // draw from 0 to x2
            // while x1Address < x2Address, poke -1
            let x1Address = Screen.getAddress(x1, y1);
            let x2Address = Screen.getAddress(x2, y1);

            // 1. draw line from x1 to x1Address + 1

            let mod = x1 - (x1 / 16 * 16);
            let pixel = twoToThe[x1] - 1;
            let pixel = -1 - pixel;

            do Memory.poke(x1Address, pixel & COLOR);

            if (x1Address = x2Address) {
                return;
            }

            // 2. draw line from x2Address to x2

            let mod = x2 - (x2 / 16 * 16);
            if (mod = 15) {
                let pixel = -1;
            } else {
                let pixel = twoToThe[x2 + 1] - 1;
            }

            do Memory.poke(x2Address, pixel & COLOR);

            // 3. Fill in words between x1Address and x2Address
            let x1Address = x1Address + 1;

            while (x1Address < x2Address) {
                do Memory.poke(x1Address, -1 & COLOR);
                let x1Address = x1Address + 1;
            }

            return;
        }

        let dx = x2 - x1;
        let dy = y2 - y1;

        while (~(a > dx) & ~(b > dy)) {
            do Screen.drawPixel(x1 + a, y1 + b);

            if (adyMinusbdx < 0) {
                let a = a + 1;
                let adyMinusbdx = adyMinusbdx + dy;
            } else {
                let b = b + 1;
                let adyMinusbdx = adyMinusbdx - dx;
            }
        }

        return;
    }

    /** Draws a filled rectangle whose top left corner is (x1, y1)
     * and bottom right corner is (x2,y2), using the current color. */
    function void drawRectangle(int x1, int y1, int x2, int y2) {
        while (~(y1 > y2)) {
            do Screen.drawLine(x1, y1, x2, y1);
            let y1 = y1 + 1;
        }

        return;
    }

    /** Draws a filled circle of radius r<=181 around (x,y), using the current color. */
    function void drawCircle(int x, int y, int r) {
        return;
    }
}
